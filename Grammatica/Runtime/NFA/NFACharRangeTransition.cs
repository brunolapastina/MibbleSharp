// <copyright file="NFACharRangeTransition.cs" company="None">
//    <para>
//    This program is free software: you can redistribute it and/or
//    modify it under the terms of the BSD license.</para>
//    <para>
//    This work is distributed in the hope that it will be useful, but
//    WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</para>
//    <para>
//    See the LICENSE.txt file for more details.</para>
//    Original code as generated by Grammatica 1.6 Copyright (c) 
//    2003-2015 Per Cederberg. All rights reserved.
//    Updates Copyright (c) 2016 Jeremy Gibbons. All rights reserved
// </copyright>

namespace PerCederberg.Grammatica.Runtime.NFA
{
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A character range match transition. Used for user-defined
    /// character sets in regular expressions.
    /// </summary>
    internal class NFACharRangeTransition : NFATransition
    {
        /// <summary>
        /// The inverse match flag.
        /// </summary>
        private readonly bool inverse;

        /// <summary>
        /// The case-insensitive match flag.
        /// </summary>
        private readonly bool ignoreCase;

        /// <summary>
        /// The character set content.
        /// </summary>
        private List<char> charContents = new List<char>();

        /// <summary>
        /// The character range content
        /// </summary>
        private List<Range> rangeContents = new List<Range>();

        /// <summary>
        /// Initializes a new instance of the <see cref="NFACharRangeTransition"/> class.
        /// </summary>
        /// <param name="inverse">The inverse match flag</param>
        /// <param name="ignoreCase">The case-insensitive match flag</param>
        /// <param name="state">The target state</param>
        public NFACharRangeTransition(
            bool inverse,
            bool ignoreCase,
            NFAState state)
            : base(state)
        {
            this.inverse = inverse;
            this.ignoreCase = ignoreCase;
        }

        /// <summary>
        /// Gets a value indicating whether this transition only matches ASCII characters.
        /// I.e. characters with numeric values between 0 and 127.
        /// </summary>
        public override bool IsAscii
        {
            get
            {
                if (this.inverse)
                {
                    return false;
                }

                foreach (var ch in this.charContents)
                {
                    if (ch < 0 || ch >= 128)
                    {
                        return false;
                    }
                }

                foreach (var r in this.rangeContents)
                {
                    if (!r.IsAscii)
                    {
                        return false;
                    }
                }

                return true;
            }
        }

        /// <summary>
        /// Adds a single character to this character set.
        /// </summary>
        /// <param name="c">The character to add</param>
        public void AddCharacter(char c)
        {
            if (this.ignoreCase)
            {
                c = char.ToLower(c);
            }

            this.charContents.Add(c);
        }

        /// <summary>
        /// Adds a character range to this character set.
        /// </summary>
        /// <param name="min">The minimum character value</param>
        /// <param name="max">The maximum character value</param>
        public void AddRange(char min, char max)
        {
            if (this.ignoreCase)
            {
                min = char.ToLower(min);
                max = char.ToLower(max);
            }

            this.rangeContents.Add(new Range(min, max));
        }

        /// <summary>
        /// Checks if the specified character matches the transition.
        /// </summary>
        /// <param name="ch">The character to check</param>
        /// <returns>True if the character matches, false if not</returns>
        public override bool Match(char ch)
        {
            if (this.ignoreCase)
            {
                ch = char.ToLower(ch);
            }

            if (this.charContents.Any(c => c == ch)
                || this.rangeContents.Any(r => r.Inside(ch)))
            {
                return !this.inverse;
            }

            return this.inverse;
        }

        /// <summary>
        /// Creates a copy of this transition but with another target
        /// state.
        /// </summary>
        /// <param name="state">The new target state</param>
        /// <returns>An identical copy of this transition</returns>
        public override NFATransition Copy(NFAState state)
        {
            NFACharRangeTransition copy;

            copy = new NFACharRangeTransition(this.inverse, this.ignoreCase, state);
            copy.rangeContents = this.rangeContents;
            copy.charContents = this.charContents;
            return copy;
        }

        /// <summary>
        /// A character range class.
        /// </summary>
        private class Range
        {
            /// <summary>
            /// The minimum character value.
            /// </summary>
            private readonly char min;

            /// <summary>
            /// The maximum character value.
            /// </summary>
            private readonly char max;

            /// <summary>
            /// Initializes a new instance of the <see cref="Range"/> class.
            /// </summary>
            /// <param name="min">The minimum character value</param>
            /// <param name="max">The maximum character value</param>
            public Range(char min, char max)
            {
                this.min = min;
                this.max = max;
            }

            /// <summary>
            /// Gets a value indicating whether this range only matches ASCII characters.
            /// I.e. characters with numeric values between 0 and 127.
            /// </summary>
            public bool IsAscii
            {
                get
                {
                    return this.min >= 0 && this.min < 128 &&
                           this.max >= 0 && this.max < 128;
                }
            }

            /// <summary>
            /// Checks if the specified character is inside the range.
            /// </summary>
            /// <param name="c">The character to check</param>
            /// <returns>True if the character is in the range, false if not</returns>
            public bool Inside(char c)
            {
                return this.min <= c && c <= this.max;
            }
        }
    }
}
